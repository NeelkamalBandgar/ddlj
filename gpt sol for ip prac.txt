Your script is almost correct, but it has some formatting issues and a minor typo. Here is the corrected version of your Python script for image blurring:

1. **Correct the indentation**: Python uses indentation to define blocks of code. Ensure that the nested loops are correctly indented.
2. **Fix the typo**: Change `j1` to `j-1`.

Here's the corrected version of your script:

```python
import cv2
import numpy as np

# Read the image
img = cv2.imread('sample.png', 0)

# Check if the image was loaded successfully
if img is None:
    raise ValueError("Image not found or unable to load.")

# Obtain number of rows and columns of the image
m, n = img.shape

# Develop Averaging filter (3x3) mask
mask = np.ones([3, 3], dtype=int)
mask = mask / 9

# Convolve the 3x3 mask over the image
img_new = np.zeros([m, n])

for i in range(1, m-1):
    for j in range(1, n-1):
        temp = (img[i-1, j-1] * mask[0, 0] + img[i-1, j] * mask[0, 1] + img[i-1, j+1] * mask[0, 2] +
                img[i, j-1] * mask[1, 0] + img[i, j] * mask[1, 1] + img[i, j+1] * mask[1, 2] +
                img[i+1, j-1] * mask[2, 0] + img[i+1, j] * mask[2, 1] + img[i+1, j+1] * mask[2, 2])
        img_new[i, j] = temp

# Convert the image to uint8 type
img_new = img_new.astype(np.uint8)

# Save the blurred image
cv2.imwrite('blurred.tif', img_new)
```

### Explanation

1. **Reading the Image**: The script reads the image `sample.png` in grayscale mode.
2. **Checking if the Image Loaded**: Before proceeding, it checks if the image was loaded successfully. If not, it raises an error.
3. **Mask Creation**: An averaging filter mask (3x3) is created and normalized by dividing by 9.
4. **Convolution**: The script applies the averaging filter to the image using nested loops. It avoids the borders to prevent accessing invalid indices.
5. **Saving the Image**: The blurred image is saved as `blurred.tif`.

### Running the Script

Make sure you have the necessary dependencies installed:

```sh
pip install opencv-python numpy
```

Save the script in a `.py` file (e.g., `blur_image.py`), and run it in a Python environment:

```sh
python blur_image.py
```

Ensure `sample.png` is in the same directory as your script or provide the correct path to the image file. The script will save the blurred image as `blurred.tif` in the same directory.
------------------------------------------------------------
If `cv2.imread` is not being resolved, it means that the OpenCV library is not properly installed or not being found by your Python environment. Here are steps to resolve this issue:

### Steps to Ensure `cv2` is Available

1. **Install OpenCV**:
    - Ensure you have OpenCV installed in your Python environment. You can install it using `pip`.

    ```sh
    pip install opencv-python
    ```

2. **Verify Installation**:
    - Check if OpenCV is correctly installed by trying to import it in a Python shell or script.

    ```python
    import cv2
    print(cv2.__version__)
    ```

    If this runs without errors and prints the version, OpenCV is correctly installed.

3. **Running the Python Script from MATLAB**:
    - Ensure Python is correctly configured in MATLAB. Here's how you can do this step-by-step:

### Example: Blurring an Image with OpenCV using MATLAB to Call Python

**Python Script (`blur_image.py`)**:
Save the following code in a file named `blur_image.py`.

```python
import cv2
import numpy as np

def blur_image(input_image_path, output_image_path):
    img = cv2.imread(input_image_path, 0)
    if img is None:
        raise ValueError(f"Image at {input_image_path} not found")
    m, n = img.shape
    mask = np.ones([3, 3], dtype=int)
    mask = mask / 9
    img_new = np.zeros([m, n])

    for i in range(1, m-1):
        for j in range(1, n-1):
            temp = (img[i-1, j-1] * mask[0, 0] + img[i-1, j] * mask[0, 1] + img[i-1, j+1] * mask[0, 2] +
                    img[i, j-1] * mask[1, 0] + img[i, j] * mask[1, 1] + img[i, j+1] * mask[1, 2] +
                    img[i+1, j-1] * mask[2, 0] + img[i+1, j] * mask[2, 1] + img[i+1, j+1] * mask[2, 2])
            img_new[i, j] = temp

    img_new = img_new.astype(np.uint8)
    cv2.imwrite(output_image_path, img_new)
```

**MATLAB Script**:
Create a MATLAB script to call the Python function. Ensure Python is properly configured in MATLAB.

1. **Configure Python in MATLAB**:

```matlab
% Set the Python version (change the path to your Python executable)
pyenv('Version', 'path_to_your_python_executable');
```

2. **Call the Python Function**:

```matlab
% Call the Python function
input_image_path = 'path/to/your/sample.png';  % Replace with the path to your input image
output_image_path = 'path/to/your/blurred.tif'; % Replace with the desired output path

% Ensure the Python script is in the current directory or add the path to the Python script
if count(py.sys.path,'') == 0
    insert(py.sys.path,int32(0),'');
end

% Call the Python function
py.blur_image.blur_image(input_image_path, output_image_path);

disp('Blurring complete. Check the output image.');
```

**Note**: Ensure that the paths to the input and output images are correct.

### Additional Debugging

1. **Check Python Path**:
    - Make sure the Python path is correctly set in MATLAB to point to the Python environment where OpenCV is installed.

2. **Environment Path**:
    - If you are using virtual environments, ensure that MATLAB points to the correct environment.

3. **MATLAB Command Window Errors**:
    - Read any errors in the MATLAB Command Window carefully. They can give hints about what is wrong (e.g., wrong Python path, missing modules, etc.).

By following these steps, you should be able to resolve the issue and run your Python script for image blurring through MATLAB. If the issue persists, consider running the script directly in a Python environment to isolate and debug the problem.
-------------------------------------------------------------------------------------------

From the screenshot, it seems you are trying to run Python code within MATLAB. MATLAB does not natively support running Python code directly. You need to either run the Python code in a Python environment or use MATLAB's capabilities to call Python from within MATLAB.

### Steps to Correct the Errors:

1. **Check Environment**: Ensure you are in the correct environment. The code provided appears to be intended for a Python environment, not MATLAB.

2. **Run in Python**:
    - Save your script as a `.py` file.
    - Run the script in a Python environment like Anaconda, Jupyter Notebook, or a Python IDE such as PyCharm.

3. **Using Python from MATLAB**:
    - If you want to run Python code from MATLAB, you can do so using MATLAB's built-in functionality to call Python. 

### Example: Calling Python from MATLAB

Hereâ€™s how you can call a Python function from MATLAB:

1. **Ensure Python is configured in MATLAB**:
    - Go to the Home tab, and click on Preferences.
    - In the Preferences window, select MATLAB > General > Python.
    - Enter the path to your Python executable.

2. **Python Script (`blur_image.py`)**:
    - Save the following code as `blur_image.py`:

    ```python
    import cv2
    import numpy as np

    def blur_image(input_image_path, output_image_path):
        img = cv2.imread(input_image_path, 0)
        m, n = img.shape
        mask = np.ones([3, 3], dtype=int)
        mask = mask / 9
        img_new = np.zeros([m, n])

        for i in range(1, m-1):
            for j in range(1, n-1):
                temp = img[i-1, j-1] * mask[0, 0] + img[i-1, j] * mask[0, 1] + img[i-1, j+1] * mask[0, 2] + img[i, j-1] * mask[1, 0] + img[i, j] * mask[1, 1] + img[i, j+1] * mask[1, 2] + img[i+1, j-1] * mask[2, 0] + img[i+1, j] * mask[2, 1] + img[i+1, j+1] * mask[2, 2]
                img_new[i, j] = temp

        img_new = img_new.astype(np.uint8)
        cv2.imwrite(output_image_path, img_new)
    ```

3. **MATLAB Script**:
    - Create a MATLAB script to call the Python function:

    ```matlab
    % Set the Python version
    pyenv('Version', 'path_to_your_python_executable');

    % Call the Python function
    input_image_path = 'sample.png';
    output_image_path = 'blurred.tif';
    py.blur_image.blur_image(input_image_path, output_image_path);
    ```

Replace `'path_to_your_python_executable'` with the actual path to your Python interpreter.

### Troubleshooting Common Issues:

- **Invalid Text Character**: Ensure that your script is free of non-ASCII characters or invisible characters. You can use a plain text editor to clean the script.
- **Unable to resolve the name**: This error indicates that MATLAB cannot find the specified function or library. Ensure that you are running the script in a Python environment or use the correct syntax to call Python functions from MATLAB.

By following these steps, you should be able to run your image processing script effectively.